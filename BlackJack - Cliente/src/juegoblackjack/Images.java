/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package juegoblackjack;

import CompartidoClientes.CONSTANTES;
import CompartidoClientes.Tcom;
import CompartidoClientes.Tjugada;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author georgina.punsoda
 */

public class Images extends FrameFons implements ActionListener, WindowListener {
    /*Variables*/
    int credit, aposta, MAX, fase;
    boolean enable, enableOK, enableDiv, enableHit, enableStand, enableDoub, split, split1;
    Image img;
    Tcom estado;
    Tjugada jugada;
    String jugs[]= new String[4];
    int numJ, posJ; //numero de jugadors i torn del jugador principal
    int numCartes, numCartesSplit;
    int idCarta;
    int valCartes;
    int mesa;
    String Alias;


    private socketUsuario sU;

    /** Creates new form Images */
    /*Inicialitzacio de tots els botons i camps de text*/
    public Images(String alias, int idMesa) {

        initComponents();
        jugada= new Tjugada(idMesa, alias);
        mesa= idMesa;
        Alias= alias;
        sU= null;
        sU= new socketUsuario();

        /*S'HA DE CARREGAR LA TAULA AMB ELS SEUS JUGADORS ACTUALS*/
        estado= getState(mesa); //funcio de IMAGES per fer el try a socketUsuario
        numJ= estado.getNumJugadores();
        jugs= estado.getNicks();
       
        for(int i=0; i<numJ; i++){
            if (jugs[i]!=null && jugs[i].equalsIgnoreCase(alias)) posJ= i;
        }

        this.jugadorNumero.setText("Jugador Numero: "+posJ);
        this.mensajeEstado.setText("Te has unido a la partida.");

        setNoms(numJ, posJ, jugs);

        /*********************************************************/
        

   
        /*OBTENIM EL CREDIT DEL JUGADOR PRINCIPAL DE LA INTERFICIE*/
        credit= estado.getCreditos()[posJ];
        
       // credit=1500;

        aposta= 0;
        MAX= 500;
        numCartes= 0;
        enable= false;
        enableOK= false;
        enableDiv= false;
        enableHit= false;
        enableStand= false;
        enableDoub= false;

        apostaArea.setText(String.valueOf(aposta));
        creditArea.setText(String.valueOf(credit));

        init.setEnabled(true);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        apostaArea = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        creditArea = new javax.swing.JTextField();
        OK = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        doub = new javax.swing.JButton();
        hit = new javax.swing.JButton();
        stand = new javax.swing.JButton();
        div = new javax.swing.JButton();
        carta = new javax.swing.JLabel();
        init = new javax.swing.JButton();
        quit = new javax.swing.JButton();
        jugadorNumero = new javax.swing.JLabel();
        mensajeEstado = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BlackJack");

        jButton1.setFont(new java.awt.Font("Calibri", 1, 18));
        jButton1.setText("1");
        jButton1.setEnabled(false);
        jButton1.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton1.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton1.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Calibri", 1, 18));
        jButton2.setText("5");
        jButton2.setEnabled(false);
        jButton2.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton2.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton2.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Calibri", 1, 18));
        jButton3.setText("25");
        jButton3.setEnabled(false);
        jButton3.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton3.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton3.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Calibri", 1, 18));
        jButton4.setText("100");
        jButton4.setEnabled(false);
        jButton4.setMaximumSize(new java.awt.Dimension(100, 100));
        jButton4.setMinimumSize(new java.awt.Dimension(100, 100));
        jButton4.setPreferredSize(new java.awt.Dimension(100, 100));
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Aposta");

        apostaArea.setEditable(false);
        apostaArea.setFont(new java.awt.Font("Calibri", 1, 18));
        apostaArea.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        apostaArea.setSelectionColor(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Crèdit");

        creditArea.setEditable(false);
        creditArea.setFont(new java.awt.Font("Calibri", 1, 18));
        creditArea.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        creditArea.setSelectionColor(new java.awt.Color(255, 255, 255));

        OK.setFont(new java.awt.Font("Calibri", 1, 18));
        OK.setText("OK");
        OK.setEnabled(false);
        OK.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OKMouseClicked(evt);
            }
        });

        reset.setFont(new java.awt.Font("Calibri", 1, 18));
        reset.setText("Reset");
        reset.setEnabled(false);
        reset.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetMouseClicked(evt);
            }
        });

        doub.setFont(new java.awt.Font("Calibri", 1, 18));
        doub.setText("Double");
        doub.setEnabled(false);
        doub.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubMouseClicked(evt);
            }
        });

        hit.setFont(new java.awt.Font("Calibri", 1, 18));
        hit.setText("Hit");
        hit.setEnabled(false);
        hit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hitMouseClicked(evt);
            }
        });

        stand.setFont(new java.awt.Font("Calibri", 1, 18));
        stand.setText("Stand");
        stand.setEnabled(false);
        stand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                standMouseClicked(evt);
            }
        });

        div.setFont(new java.awt.Font("Calibri", 1, 18));
        div.setText("Divide");
        div.setEnabled(false);
        div.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                divMouseClicked(evt);
            }
        });

        carta.setMaximumSize(new java.awt.Dimension(73, 98));
        carta.setMinimumSize(new java.awt.Dimension(73, 98));

        init.setFont(new java.awt.Font("Calibri", 1, 18));
        init.setText("Començar");
        init.setEnabled(false);
        init.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                initMouseClicked(evt);
            }
        });
        init.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initActionPerformed(evt);
            }
        });

        quit.setFont(new java.awt.Font("Calibri", 1, 18));
        quit.setText("Sortir");
        quit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitMouseClicked(evt);
            }
        });
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        jugadorNumero.setBackground(new java.awt.Color(0, 102, 102));
        jugadorNumero.setFont(new java.awt.Font("Tahoma", 0, 14));
        jugadorNumero.setForeground(new java.awt.Color(255, 255, 255));
        jugadorNumero.setText("Jugador Numero: ");

        mensajeEstado.setBackground(new java.awt.Color(0, 102, 102));
        mensajeEstado.setForeground(new java.awt.Color(255, 255, 255));
        mensajeEstado.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jugadorNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(973, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(mensajeEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap(1284, Short.MAX_VALUE)
                                        .addComponent(carta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(95, 95, 95)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(creditArea, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGap(60, 60, 60))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(689, Short.MAX_VALUE)
                                .addComponent(doub)
                                .addGap(18, 18, 18)
                                .addComponent(hit)
                                .addGap(18, 18, 18)
                                .addComponent(stand)
                                .addGap(18, 18, 18)
                                .addComponent(div)
                                .addGap(253, 253, 253)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(apostaArea, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(reset, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(OK, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, Short.MAX_VALUE)
                                .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 41, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(quit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(init, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addGap(56, 56, 56))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {OK, reset});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {div, doub, hit, stand});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mensajeEstado)
                .addGap(72, 72, 72)
                .addComponent(carta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apostaArea, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addComponent(OK)
                .addGap(18, 18, 18)
                .addComponent(reset)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(189, 189, 189)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(creditArea, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(doub)
                                    .addComponent(hit)
                                    .addComponent(stand)
                                    .addComponent(div)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jugadorNumero))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addComponent(quit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(init, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2, jButton3, jButton4});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {init, quit});

        jugadorNumero.getAccessibleContext().setAccessibleName("jugadorNumero");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        if(enable)incrAposta(1);
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        if(enable)incrAposta(5);
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        if(enable)incrAposta(25);
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        if(enable)incrAposta(100);
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void OKMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OKMouseClicked
        // TODO add your handling code here:
            //inhabilitem els botons d'aposta
        jugada= new Tjugada(mesa, Alias);
        /*mirar si se puede*/
        if(enableOK){

            /*Hemos de esperar el turno.*/
            sU= new socketUsuario();
            estado=getState(mesa);
            while (estado.getTurno()/2!=this.posJ){
                this.mensajeEstado.setText("Esperando a otros jugadores");
                sU= new socketUsuario();
                estado=getState(mesa);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            //Li enviem al servidor el que ha fet el jugador
            sU= new socketUsuario();
            jugada.setBet(CONSTANTES.BET, aposta);
            sendJugada(jugada);

			jButton1.setEnabled(false);
			jButton2.setEnabled(false);
			jButton3.setEnabled(false);
			jButton4.setEnabled(false);
			reset.setEnabled(false);
            OK.setEnabled(false);
            enable= false;
            OK.setEnabled(false);
            enableOK= true;

            //noReset();
            sU= new socketUsuario();
            estado= getState(mesa);

            //Esperem a estar a la fase de repartir (Fase=2)
            while(estado.getFase()==1) {
                //hem clickat OK pero els altres jugs no!
                System.out.println("CAMBIA DE FASE DE UNA VEZ !!!!");
                this.mensajeEstado.setText("Els altres jugadors estan apostant...");
                sU= new socketUsuario();
                estado= getState(mesa);
            }
            System.out.println("ya hemos cambiado de fase, y ahora hemos de mostrar lo de los demas. turno: "+estado.getTurno()+"  en la fase: "+estado.getFase()+" y mi posicion es : "+this.posJ);
            
            //esperem fins el nostre torn i mentre mostrem el que han fet els altres jugadors
            System.out.println("esperant cartes a OK");
            while(estado.getTurno()/2!= posJ){
                //bucle on entren quan els altres jugadors estan jugant
                /*ESTE ERROR DE AQUI NO HA DE INTERFERIR MIENTRAS SE MUESTRAN LOS DATOS*/
                this.mensajeEstado.setText("Esperant a que ens reparteixin les cartes");
                sU= new socketUsuario();
                estado= getState(mesa);
            }
            if (estado.getNicks()[0]!=null){
                System.out.println("Hemos recibido la mano y la hemos de tratar. la mano del jugador  0  vale  : "+estado.getManos()[0].valMano+" y la primera carte es el id : "+estado.getManos()[0].manos[0]);
            }
            noReset();
            //ARA ES EL NOSTRE TORN: hem de mostrar les cartes que ens han repartit
            tratarInfo(estado);

            /*Mostrem info banca!!*/
            /*System.out.println("info bancaaaaa");
            sU= new socketUsuario();
            estado= getState(mesa);
            tratarInfo(estado);*/
            
            /*ARA ENS HEM D'ESPERAR A QUE TORNI A SER EL
             NOSTRE TORN EN EL JOC (FASE=3) PER DEMANAR*/
            System.out.println("esperem a que tots hagin apostat");
            while(estado.getFase()==2){
                sU= new socketUsuario();
                estado= getState(mesa);
                tratarInfo(estado);
            }
            System.out.println("ja hem repartit a tothom");
            //esperem fins el nostre torn i mentre mostrem la jugada dels altres jugadors
            while(estado.getTurno()/2!= posJ){
                System.out.println("esta jugant un altre jug");
                sU= new socketUsuario();
                estado= getState(mesa);
                tratarInfo(estado);
            }
            this.numCartes=2;

            //Habilitem boto de demanar carta
            hit.setEnabled(true);
            enableHit= true;

            //Habilitem el boto per plantar-nos
            stand.setEnabled(true);
            enableStand= true;

            //Si tenim credit suficient i no ens passem, habilitem el boto de doblar l'aposta
            if(!((aposta*2)>500) && !((aposta*2)>credit)){
                doub.setEnabled(true);
                enableDoub= true;
            }
            
            //Habilitem el boto de fer split de la jugada si son dues cartes iguals
            if((estado.getManos()[posJ].manos[0]%13 == estado.getManos()[posJ].manos[1]%13)){
                    div.setEnabled(true);
                    enableDiv= true;
            }
            this.mensajeEstado.setText("Ya has realizado tu apuesta");
        }

    }//GEN-LAST:event_OKMouseClicked

    private void resetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetMouseClicked
        // TODO add your handling code here:
        if(enable){
            aposta= 0;
            apostaArea.setText(String.valueOf(aposta));
            OK.setEnabled(false);
            enableOK= false;


            credit= estado.getCreditos()[posJ];
            creditArea.setText(String.valueOf(credit));
        }
    }//GEN-LAST:event_resetMouseClicked

    private void doubMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubMouseClicked
        // TODO add your handling code here:
        /*Dobla l'aposta i s'ho juga a una carta*/
        System.out.println("HACEMOS UN DOBLE !!!!!!!!!!!!!!!!!!!!!!!!");
        Tcom ant;

        int jugPartida=0;

        if(enableDoub){
            sU= new socketUsuario();
            estado=getState(mesa);
            while (estado.getTurno()/2!=this.posJ){
                this.mensajeEstado.setText("Esperando a otros jugadores");
                sU= new socketUsuario();
                estado=getState(mesa);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            //avisem al servidor de l'accio del jugador
            sU= new socketUsuario();
            estado= getState(mesa);
            jugPartida=estado.getUltimo();
            jugada= new Tjugada(mesa, Alias);
            jugada.setAccion(CONSTANTES.DOBLE);
            sU= new socketUsuario();
            sendJugada(jugada);


            if(enableDiv){
                div.setEnabled(false);
                enableDiv= false;
            }
            doub.setEnabled(false);
            enableDoub= false;

            //Mirem a veure si el servidor ja ha fet la seva feina i tractem la info
            boolean soyUltimo = jugPartida==posJ;

            /*NO MOSTRAR EL MENSAJE DE QUE NOS HEMOS PASADO !!!!!!!!!!!!!!!!!!!!!!!*/
            /*mirar aqui si eres el ultimo !!*/
            /*NO TRATAMOS EL CASO DE QUE NO HAYA NINGUN SPLIT DE NINGUN TIPO.
             * LO HEMOS DE TRATAR Y VER LO DEL ULTIMO.
             * !!!!!!
             */

            if ((soyUltimo &&!split) || split1){
                System.out.println("entramos en soyultimo y no split o split1");
                
                    while(estado.getFase()==3){
                        this.mensajeEstado.setText("Esperando a otros jugadores");
                        sU= new socketUsuario();
                        estado= getState(mesa);
                        tratarInfo(estado);
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                    sU= new socketUsuario();
                    Tcom anterior = getStateAnterior(mesa);
                    System.out.println("normalmente SI nos hemos pasado y anterior es nulo? "+anterior==null);


                    if(!split && !split1){
                        if((credit+aposta) > estado.getCreditos()[posJ]) perdut(anterior);
                        else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(anterior);
                        else{
                            empat(anterior);
                        }
                    }else if(split1){
                        if(((anterior.getSplitManos()[posJ].valMano > anterior.getManos()[3].valMano) && !anterior.getSplitPasarse()[posJ]) || ((anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)&& anterior.getPasado()[3])){
                           guanyat(anterior);
                        }else if((anterior.getSplitPasarse()[posJ] || (anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)) || ((anterior.getSplitManos()[posJ].valMano == anterior.getManos()[3].valMano) && (anterior.getManos()[3].numCartas==2))){
                            perdut(anterior);
                        }else{
                            empat(anterior);
                        }
                    }
                    
                    split1=false;
                    setNoDivide();
                    tratarInfo(anterior);

                    hit.setEnabled(false);
                    enableHit= false;

                    stand.setEnabled(false);
                    enableStand= false;

                    OK.setEnabled(false);
                    enableOK= false;
                    init.setEnabled(true);

            }else if(!split && !split1){
                incrAposta(aposta);
                apostaArea.setText(String.valueOf(aposta));

                

                /*OK.setEnabled(false);
                enableOK= false;
                init.setEnabled(false);

                while(estado.getFase()==3){
                    this.mensajeEstado.setText("Esperando a otros jugadores");
                        sU= new socketUsuario();
                        estado= getState(mesa);
                        tratarInfo(estado);
                          try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                sU= new socketUsuario();
                Tcom anterior = getStateAnterior(mesa);
                if((credit+aposta) > estado.getCreditos()[posJ]) perdut(anterior);
                else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(anterior);
                else{
                    empat(anterior);
                }
                tratarInfo(anterior);
                init.setEnabled(true);*/
                tractaSenseSplit(estado);
                
                hit.setEnabled(false);
                enableHit= false;

                stand.setEnabled(false);
                enableStand= false;
            }

            if(split){
                
                incrAposta(aposta/2);
                apostaArea.setText(String.valueOf(aposta));

                sU= new socketUsuario();
                estado= getState(mesa);
                tratarInfo(estado);

                credit= estado.getCreditos()[posJ];
                creditArea.setText(String.valueOf(credit));

                split= false;
                split1= true;
                setDivide2();

                hit.setEnabled(true);
                enableHit= true;

                stand.setEnabled(true);
                enableStand= true;

                doub.setEnabled(true);
                enableDoub= true;

            }else if (split1){
                incrAposta(aposta/2);
                apostaArea.setText(String.valueOf(aposta));
                tractaMaDreta(estado);
                split1= false;
                setNoDivide();
            }
            this.mensajeEstado.setText("Ya has realizado: double");
        }
    }//GEN-LAST:event_doubMouseClicked

    private void hitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hitMouseClicked
        // TODO add your handling code here:
        //Hem d'enviar a pintar les cartes i controlar si son dues iguals
        int jugPartida=0;
        /*arreglado lo de split, hit hasta pasarse y double*/

        System.out.println("ESTAMOS HACIENDO HIT! y posj == "+posJ);
//        sU= new socketUsuario();
//        estado= getState(mesa);
//        if (estado.getTurno()/2!=this.posJ){System.out.println("not you");}
//        else
        if(enableHit){
            sU= new socketUsuario();
            estado= getState(mesa);

            jugPartida=estado.getUltimo();
            enableHit= false;
            hit.setEnabled(false);
            boolean volverActivarDouble = false;

            while (estado.getTurno()/2!=posJ){
                this.mensajeEstado.setText("Esperando a otros jugadores");
                sU= new socketUsuario();
                estado= getState(mesa);

                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
            }


            /* avisem al servidor de la jugada del client */
            jugada= new Tjugada(mesa, Alias);
            jugada.setAccion(CONSTANTES.HIT);
            sU= new socketUsuario();
            sendJugada(jugada);

            //llegim la resposta del servidor
            sU= new socketUsuario();
            estado= getState(mesa);

            //jugPartida=estado.getUltimo();
            boolean b = true;

            /*si ha hecho split y estamos en la mano de split hemos de mirar posj de splitmanos*/

            /********** NO HI HA SPLIT ********/
            /******************************************************************/
            if (!split && !split1) {
                tractaSenseSplit(estado);
                
            /********** BLOC ESQUERRA ********/
            /******************************************************************/
            }else if(split){
                volverActivarDouble= tractaMaEsquerra(estado, volverActivarDouble);

            /********** BLOC DRET ********/
            /******************************************************************/
            }else{
                tractaMaDreta(estado);
            }

            if(!volverActivarDouble){
                enableDoub= false;
                doub.setEnabled(false);
            }
                enableDiv= false;
                div.setEnabled(false);
            //Com ara tenim mes cartes (a part de les inicials) les opcions
            //de "split" i "double" s'han de desactivar
            System.out.println("FIN DEL HIT !!");
            this.mensajeEstado.setText("Ya has realizado Hit");
        }
    }//GEN-LAST:event_hitMouseClicked

    private void divMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_divMouseClicked
        // TODO add your handling code here:
        if(enableDiv){
            /*no muestra por pantalla*/
            /* Avisem al servidor que el jugador ha fet split */
            /*VIGILAR QUE SEA TU TURNO ANTES DE ENVIAR EL DIV !!!!!!*/
            sU= new socketUsuario();
            estado=getState(mesa);
            while (estado.getTurno()/2!=this.posJ){
              this.mensajeEstado.setText("Esperando a otros jugadores");
                sU= new socketUsuario();
                estado=getState(mesa);
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            jugada= new Tjugada(mesa, Alias);
            jugada.setAccion(CONSTANTES.SPLIT);
            sU= new socketUsuario();
            sendJugada(jugada);

            div.setEnabled(false);
            enableDiv= false;

            split= true;    //amb aquesta variable tractarem els hits i stand de la ma esquerra
            split1= false;  //amb aquesta variable tractarem els hits i stand de la ma dreta
            numCartesSplit= 2;
            
            //hem de llegir del servidor fins que ens hagi repartit mes cartes
            sU= new socketUsuario();
            estado=getState(mesa);

            incrAposta(aposta);
            apostaArea.setText(String.valueOf(aposta));
            
            credit= estado.getCreditos()[posJ];
            creditArea.setText(String.valueOf(credit));

            if(estado.getHechoSplits()!= null){
                while(!estado.getHechoSplits()[posJ]) {
                    sU= new socketUsuario();
                    estado=getState(mesa);
                }
                setDivide();    //marquem la primera ma (ESQUERRA) pel PAINT
                tratarInfo(estado);
            }
            this.mensajeEstado.setText("Has realizado: Split");
        }
    }//GEN-LAST:event_divMouseClicked

    private void standMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_standMouseClicked
        // TODO add your handling code here:
        if(enableStand){
            
            sU= new socketUsuario();
            estado= getState(mesa);
             while(estado.getTurno()/2!=this.posJ){
                this.mensajeEstado.setText("Esperando a otros jugadores");
                sU= new socketUsuario();
                estado= getState(mesa);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
            }


                jugada= new Tjugada(mesa, Alias);
                jugada.setAccion(CONSTANTES.STAND);
                sU= new socketUsuario();
                sendJugada(jugada);

                //Deshabilitem tots els botons de jugar i habilitem el de començar una nova partida
                if(enableDiv){
                    div.setEnabled(false);
                    enableDiv= false;
                }

                if(enableDoub){
                    enableDoub=false;
                    doub.setEnabled(false);
                }

                OK.setEnabled(false);
                enableOK= false;

                

                /*Desactivem HIT i STAND*/
                hit.setEnabled(false);
                enableHit= false;
                stand.setEnabled(false);
                enableStand= false;
                init.setEnabled(true);

                if(split){
                    //hem acabat la ma esquerra
                    split= false;
                    split1= true;   //activem per la ma dreta
                    setDivide2();

                    /*Activem HIT i STAND*/
                    hit.setEnabled(true);
                    enableHit= true;
                    stand.setEnabled(true);
                    enableStand= true;
                    doub.setEnabled(true);
                    enableDoub= true;
                }else{
                    /*hay que tratar la info :*/
                    while(estado.getFase()==3){
                        sU= new socketUsuario();
                        estado= getState(mesa);
                    }
                    sU= new socketUsuario();
                    Tcom anterior = getStateAnterior(mesa);
                    System.out.println("normalmente SI nos hemos pasado y anterior es nulo? "+anterior==null);

                    if(!split && !split1){
                        if((credit+aposta) > estado.getCreditos()[posJ]) perdut(estado);
                        else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(estado);
                        else{
                            empat(estado);
                        }
                     }else if(split1){
                        if(((anterior.getSplitManos()[posJ].valMano > anterior.getManos()[3].valMano) && !anterior.getSplitPasarse()[posJ]) || ((anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)&& anterior.getPasado()[3])){
                           guanyat(anterior);
                        }else if((anterior.getSplitPasarse()[posJ] || (anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)) || ((anterior.getSplitManos()[posJ].valMano == anterior.getManos()[3].valMano) && (anterior.getManos()[3].numCartas==2))){
                            perdut(anterior);
                        }else{
                            System.out.println("valor dreta= "+anterior.getSplitManos()[posJ].valMano);
                            System.out.println("valor banca= "+anterior.getManos()[3].valMano);
                            empat(anterior);
                        }
                    }
                    
                    tratarInfo(anterior);

                    System.out.println("el resultado de la partida es : "+anterior);
                    System.out.println("por si no lo lee:  "+anterior.getNicks()[0]+""+anterior.getPlantado()[0]+""+anterior.getManos()[0].valMano+" el servidor: "+anterior.getManos()[3].valMano);
                    split1= false;
                    setNoDivide();
                }

           this.mensajeEstado.setText("Ya has realizado: Stand");
        }
    }//GEN-LAST:event_standMouseClicked

    private void initActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_initActionPerformed

    private void initMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_initMouseClicked
        // TODO add your handling code here:
        //mentre estiguem en FASE D'ESPERA, esperem.
        //Quan canviem de fase (a aposta), habilitem els botons per apostar
       if(init.isEnabled()){

           sU= new socketUsuario();
           estado= getState(mesa);
           System.out.println("el turno en el COMENZAR es : "+estado.getTurno()+" dividido por dos es "+(estado.getTurno()/2)+"y la posicion del jugador es "+posJ);

           novaPartida(estado);
           reset();

           while (estado.getTurno()/2!=this.posJ) {
               this.mensajeEstado.setText("Esperando a otros jugadores");
               sU= new socketUsuario();
               estado= getState(mesa);
               //tratarInfo(estado);
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                }
           }
           System.out.println("hemos entrado en el init !!");

           sU= new socketUsuario();
           jugada.setAccion(CONSTANTES.READY);
           sendJugada(jugada);
           
           sU= new socketUsuario();
           estado= getState(mesa);
           //tratarInfo(estado);
          // System.out.println("Le damos a ready y el estado nos indica la fase: "+estado.getFase());

           while(estado.getFase() == 0){
                this.mensajeEstado.setText("Esperando a otros jugadores");
                new errorAposta().mostrarInfo("Estem esperant altres jugadors");
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
                    }
               sU= new socketUsuario();
               estado= getState(mesa);
           }
           
            while((estado.getTurno()/2)!= posJ) {
                new info().mostrar("no es el teu torn...");
                sU= new socketUsuario();
                estado= getState(mesa);
            }
            enableBotonsAposta();
            init.setEnabled(false);
           
           
           sU= new socketUsuario();
           estado= getState(mesa);
           
           tratarInfo(estado);

           //actualitzem el credit del jugador
           credit= estado.getCreditos()[posJ];
           creditArea.setText(String.valueOf(credit));
           //resetegem l'aposta
           aposta=0;
           apostaArea.setText(String.valueOf(aposta));
           OK.setEnabled(true);
           enableOK= true;
       

       }
       System.out.println("SALIMOS DEL COMENZAR");
       this.mensajeEstado.setText("Ahora puedes apostar");

//        if(init.isEnabled()){
//            while(estado.getFase()==0){
//                new info().mostrar("Espera...");
//                estado= getState(mesa);
//                System.out.println("ESTAMOS ESPERANDO Y PIDIENDO COSAS");
//            }
//
//            while((estado.getTurno()/2)!= posJ) estado= getState(mesa);
//            enableBotonsAposta();
//            init.setEnabled(false);
//            new info().mostrar("Fes la teva aposta");
//        }
    }//GEN-LAST:event_initMouseClicked

    private void quitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitMouseClicked
        // TODO add your handling code here:

        sU = new socketUsuario();
        Tjugada tj = new Tjugada(this.mesa,Alias);
        tj.setAccion(CONSTANTES.SALIR);
        sendJugada(tj);
        System.out.println("SALIR !!!!!! OH NOEZ !!!!");

        System.exit(0);
}//GEN-LAST:event_quitMouseClicked

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed

    }//GEN-LAST:event_quitActionPerformed

    /*Funcio que incrementa l'aposta amb el valor que se li passa per parametre*/
    private void incrAposta(int valor){
        /*VIGILAR SI SE PUEDE MAS DE 500 SI ESTAMOS FUERA DE LA FASE 0*/

		if(!((aposta+valor)>MAX) && !((aposta+valor)>credit)){
			aposta+=valor;
			credit-=valor;
			apostaArea.setText(String.valueOf(aposta));
            creditArea.setText(String.valueOf(credit));

            OK.setEnabled(true);
            enableOK= true;
            
		}else if (estado.getFase()>1 && (aposta+valor)>credit){
            aposta+=valor;
            credit -=valor;
            apostaArea.setText(String.valueOf(aposta));
            creditArea.setText(String.valueOf(credit));
        }
        else if(((aposta+valor)>MAX)&&estado.getFase()<2){
			new errorAposta().mostrar("NO POTS APOSTAR MES DE 500 EUROS!");
		}else{
			new errorAposta().mostrar("NO TENS TANT CREDIT!");
		}
	}

    private void enableBotonsAposta(){
        jButton1.setEnabled(true);
        jButton2.setEnabled(true);
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);
        reset.setEnabled(true);
        enable= true;
    }

    private Tcom getState(int idMesa){
        Tcom s;

        try {
            sU.avisarAccion(CONSTANTES.ENVIARESTADOACLIENTE); // ha de ser "4"
        } catch (IOException ex) {
            Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Aqui no tenemos que entrar");
        }
        s = sU.pedirEstadoPartida(idMesa);
        return s;

    }

    private Tcom getStateAnterior(int idMesa){
        Tcom s;

        try {
            sU.avisarAccion("7");
        } catch (IOException ex) {
            Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Aqui no tenemos que entrar");
        }
        s = sU.pedirEstadoPartida(idMesa);
        return s;

    }

    private void sendJugada(Tjugada tj){
        try {
            sU.avisarAccion(CONSTANTES.RECIBIRDATOSPARTIDA);// "5"
        } catch (IOException ex) {
            Logger.getLogger(Images.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sU.enviarJugada(tj);
        } catch (IOException ex) {

        }
    }
    private void novaPartida(Tcom info){
        System.out.println("novaPartida");

        numJ= info.getNumJugadores();
        jugs= info.getNicks();

        for(int i=0; i<numJ; i++){
            if (jugs[i]!=null && jugs[i].equalsIgnoreCase(Alias)) posJ= i;
        }

        setNoms(numJ, posJ, jugs);
    }

    /*Funcio que tracta la info quan demanem carta sense split*/
    private void tractaSenseSplit(Tcom estado){
        boolean b= true;
        Tcom anterior;
        int jugPartida= estado.getUltimo();

        System.out.println("caso 1");
        if (estado.getManos() != null) {
            while ((numCartes == estado.getManos()[posJ].numCartas) && (b)) {
                sU = new socketUsuario();
                estado = getState(mesa);

                System.out.println("flipaaaa");
                System.out.println("por si no lo lee:  " + estado.getNicks()[0] + "" + estado.getPlantado()[0] + "" + estado.getManos()[0].valMano + " el servidor: " + estado.getManos()[3].valMano + "Y EL NUMERO DE CARTAS HES: " + estado.getManos()[0].numCartas);
                if (estado.getFase() != 3) {
                    b = false;
                    sU = new socketUsuario();
                    anterior = getStateAnterior(mesa);
                    System.out.println("por si no lo lee:  " + anterior.getNicks()[0] + "" + anterior.getPlantado()[0] + "" + anterior.getManos()[0].valMano + " el servidor: " + anterior.getManos()[3].valMano);
                }
                System.out.println("bucle");
            }
        }
        //ara que tenim carta nova la mostrem
        /********** NOMES UN JUGADOR ACTIU A LA PARTIDA **********/

        if(jugPartida == posJ){
            System.out.println("BREAKPOINT 0");
            if (estado.getManos() != null) {
                System.out.println("BREAKPOINT 1 llalala");
                if (estado.getFase() == 3) {
                    System.out.println("normalmente no nos hemos pasado");
                    numCartes = estado.getManos()[posJ].numCartas;
                    tratarInfo(estado);
                    //Tornem a habilitar el boto de hit
                    enableHit = true;
                    hit.setEnabled(true);

                }
                else{
               // numCartes= anterior.getManos()[posJ].numCartas;

                    sU= new socketUsuario();
                    anterior = getStateAnterior(mesa);
                   // System.out.println("escribimos las masnos de anterior"+anterior.getManos()[posJ].manos[0]+"  "+anterior.getManos()[posJ].manos[1]+"  "+anterior.getManos()[posJ].manos[2]+" Y EL NUM CARTES ES :  "+anterior.getManos()[posJ].numCartas );
                    tratarInfo(anterior);

                    if((credit+aposta) > estado.getCreditos()[posJ]) {
                        System.out.println("i lost...:-(");
                        perdut(anterior);}
                    else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(anterior);
                    else{
                        empat(anterior);
                    }


                    /*Desactivem HIT i STAND*/
                    hit.setEnabled(false);
                    enableHit= false;
                    stand.setEnabled(false);
                    enableStand= false;
                    OK.setEnabled(false);
                    enableOK= false;
                    init.setEnabled(true);


                }
                System.out.println("nor if nor else");

            }
        }else{
            System.out.println("BREAKPOINT 3");
        /********** MES D'UN JUGADOR ACTIU A LA PARTIDA **********/
            if(estado.getManos()[posJ].valMano < 22){
                System.out.println("BREAKPOINT 4");
                enableHit= true;
                hit.setEnabled(true);
                tratarInfo(estado);
            }else{
                System.out.println("BREAKPOINT 5");
                enableHit= false;
                hit.setEnabled(false);
                sU= new socketUsuario();

                estado= getState(mesa);
                tratarInfo(estado);

                  /*  while(estado.getFase()==3){
                        sU= new socketUsuario();
                        estado= getState(mesa);
                    }
                    sU= new socketUsuario();
                    Tcom anterior2 = getStateAnterior(mesa);*/

                if((credit+aposta) > estado.getCreditos()[posJ]) {
                    System.out.println("i lost...:-(");
                    perdut(estado);
                }else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(estado);
                else{
                    empat(estado);
                }

                System.out.println("normalmente SI nos hemos pasado y anterior es nulo? "+estado==null);
                tratarInfo(estado);

                /*Com ens hem passat hem de deshabilitar els botons*/
                 if(enableDiv){
                    div.setEnabled(false);
                    enableDiv= false;
                }

                if(enableDoub){
                    enableDoub=false;
                    doub.setEnabled(false);
                }

                OK.setEnabled(false);
                enableOK= false;

                hit.setEnabled(false);
                enableHit= false;

                stand.setEnabled(false);
                enableStand= false;

                init.setEnabled(true);
                while(estado.getFase()==3){
                    sU= new socketUsuario();
                    estado= getState(mesa);
                }
            }
        }
    }

    /*Funcio que tracta nova carta a ma esquerra*/
    private boolean tractaMaEsquerra(Tcom estado, boolean volverActivarDouble){
        boolean b= true;

        System.out.println("caso 2");
        if (estado.getManos() != null) {
            while ((numCartes == estado.getManos()[posJ].numCartas) && (b)) {
                sU = new socketUsuario();
                estado = getState(mesa);
                System.out.println("flipaaaa");
                System.out.println("por si no lo lee:  " + estado.getNicks()[0] + "" + estado.getPlantado()[0] + "" + estado.getManos()[0].valMano + " el servidor: " + estado.getManos()[3].valMano + "Y EL NUMERO DE CARTAS HES: " + estado.getManos()[0].numCartas);
            }
        }
        //ara que tenim carta nova la mostrem
        if (estado.getManos() != null) {
            if (estado.getManos()[posJ].valMano > 21) {
                System.out.println("se ha pasado en el hit y hemos de activar el double para la otra mano");
                enableDoub= true;
                doub.setEnabled(true);
                volverActivarDouble=true;
                this.split=false;
                this.split1=true;
                setDivide2();
            }
            /*vigilar num cartes y numcartes split !!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
            numCartes = estado.getManos()[posJ].numCartas;
            System.out.println("normalmente no nos hemos pasado");
            //Tornem a habilitar el boto de hit
            enableHit = true;
            hit.setEnabled(true);
            tratarInfo(estado);
        }

        return volverActivarDouble;
    }

    private void tractaMaDreta(Tcom estado){
        boolean b= true;
        Tcom anterior;
        int jugPartida= estado.getUltimo();

        System.out.println("caso 3");
        if (estado.getSplitManos() != null) {
            while ((numCartesSplit == estado.getSplitManos()[posJ].numCartas) && (b)) {
                sU = new socketUsuario();
                estado = getState(mesa);
                System.out.println("flipaaaa");
                System.out.println("por si no lo lee:  " + estado.getNicks()[0] + "" + estado.getPlantado()[0] + "" + estado.getManos()[0].valMano + " el servidor: " + estado.getManos()[3].valMano + "Y EL NUMERO DE CARTAS HES: " + estado.getManos()[0].numCartas);
                if (estado.getFase() != 3) {
                    b = false;
                    sU = new socketUsuario();
                    anterior = getStateAnterior(mesa);
                    System.out.println("por si no lo lee:  " + anterior.getNicks()[0] + "" + anterior.getPlantado()[0] + "" + anterior.getManos()[0].valMano + " el servidor: " + anterior.getManos()[3].valMano);
                }
            }
        }
        //ara que tenim carta nova la mostrem
         /********** NOMES UN JUGADOR ACTIU  o som els ultims A LA PARTIDA **********/
        System.out.println("jugpartida vale : "+jugPartida+" y posJ vale : "+posJ);
        if(jugPartida == posJ){
            System.out.println("BREAK 0");
        if (estado.getSplitManos() != null) {
            System.out.println("BREAK 001");
            if (estado.getFase() == 3) {
                System.out.println("BREAK 002");
                System.out.println("normalmente no nos hemos pasado");
                numCartesSplit = estado.getSplitManos()[posJ].numCartas;

                tratarInfo(estado);
                //Tornem a habilitar el boto de hit
                enableHit = true;
                hit.setEnabled(true);
            }else{
                System.out.println("BREAK 003");
                sU= new socketUsuario();
                anterior = getStateAnterior(mesa);
                System.out.println("!!!!!!!!!normalmente SI nos hemos pasado y anterior es nulo? "+anterior==null);

                tratarInfo(anterior);

                if(((anterior.getSplitManos()[posJ].valMano > anterior.getManos()[3].valMano) && !anterior.getSplitPasarse()[posJ]) || ((anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)&& anterior.getPasado()[3])){
                   guanyat(anterior);
                }else if((anterior.getSplitPasarse()[posJ] || (anterior.getSplitManos()[posJ].valMano < anterior.getManos()[3].valMano)) || ((anterior.getSplitManos()[posJ].valMano == anterior.getManos()[3].valMano) && (anterior.getManos()[3].numCartas==2))){
                    perdut(anterior);
                }else{
                    System.out.println("valor dreta= "+anterior.getSplitManos()[posJ].valMano);
                    System.out.println("valor banca= "+anterior.getManos()[3].valMano);
                    empat(anterior);
                }


                /*Desactivem HIT i STAND*/
                hit.setEnabled(false);
                enableHit= false;
                stand.setEnabled(false);
                enableStand= false;
                OK.setEnabled(false);
                enableOK= false;
                init.setEnabled(true);
            }
        }
        }

        /*mas de un jugador*/
        else{
            System.out.println("ULTIMOS ?");

            if(estado.getSplitManos()[posJ].valMano < 22){
                enableHit= true;
                hit.setEnabled(true);
                tratarInfo(estado);
            }else{
                enableHit= false;
                hit.setEnabled(false);

                /*while(estado.getFase()==3){
                    sU= new socketUsuario();
                    estado= getState(mesa);
                }
                sU= new socketUsuario();
                Tcom anterior3 = getStateAnterior(mesa);
                System.out.println("normalmente SI nos hemos pasado y anterior es nulo? "+anterior3==null);
                tratarInfo(anterior3);*/
                System.out.println("BREAKPOINT 5");
                enableHit= false;
                hit.setEnabled(false);
                sU= new socketUsuario();

                estado= getState(mesa);
                tratarInfo(estado);


                borrarPuntet();

                if((credit+aposta) > estado.getCreditos()[posJ]) {
                    System.out.println("i lost...:-(");
                    perdut(estado);
                }else if((credit+aposta) < estado.getCreditos()[posJ]) guanyat(estado);
                else{
                    empat(estado);
                }


                /*Com ens hem passat hem de deshabilitar els botons*/
                 if(enableDiv){
                    div.setEnabled(false);
                    enableDiv= false;
                }

                if(enableDoub){
                    enableDoub=false;
                    doub.setEnabled(false);
                }

                OK.setEnabled(false);
                enableOK= false;

                hit.setEnabled(false);
                enableHit= false;

                stand.setEnabled(false);
                enableStand= false;

                init.setEnabled(true);
            }

        }
    }

    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowOpened(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosing(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowClosed(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowIconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeiconified(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowActivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void windowDeactivated(WindowEvent e) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OK;
    private javax.swing.JTextField apostaArea;
    private javax.swing.JLabel carta;
    private javax.swing.JTextField creditArea;
    private javax.swing.JButton div;
    private javax.swing.JButton doub;
    private javax.swing.JButton hit;
    private javax.swing.JButton init;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jugadorNumero;
    private javax.swing.JLabel mensajeEstado;
    private javax.swing.JButton quit;
    private javax.swing.JButton reset;
    private javax.swing.JButton stand;
    // End of variables declaration//GEN-END:variables

}
